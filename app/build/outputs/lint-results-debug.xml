<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 24.4.1">

    <issue
        id="MissingRegistered"
        severity="Error"
        message="Class referenced in the manifest, `com.adsdk.sdk.video.RichMediaActivity`, was not found in the project or the libraries"
        category="Correctness"
        priority="8"
        summary="Missing registered class"
        explanation="If a class is referenced in the manifest, it must also exist in the project (or in one of the libraries included by the project. This check helps uncover typos in registration names, or attempts to rename or move classes without updating the manifest file properly."
        url="http://developer.android.com/guide/topics/manifest/manifest-intro.html"
        urls="http://developer.android.com/guide/topics/manifest/manifest-intro.html"
        errorLine1="        &lt;activity android:name=&quot;com.adsdk.sdk.video.RichMediaActivity&quot;"
        errorLine2="        ^">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\AndroidManifest.xml"
            line="24"
            column="9"/>
    </issue>

    <issue
        id="MissingRegistered"
        severity="Error"
        message="Class referenced in the manifest, `com.adsdk.sdk.banner.InAppWebView`, was not found in the project or the libraries"
        category="Correctness"
        priority="8"
        summary="Missing registered class"
        explanation="If a class is referenced in the manifest, it must also exist in the project (or in one of the libraries included by the project. This check helps uncover typos in registration names, or attempts to rename or move classes without updating the manifest file properly."
        url="http://developer.android.com/guide/topics/manifest/manifest-intro.html"
        urls="http://developer.android.com/guide/topics/manifest/manifest-intro.html"
        errorLine1="        &lt;activity android:name=&quot;com.adsdk.sdk.banner.InAppWebView&quot;>&lt;/activity>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\AndroidManifest.xml"
            line="26"
            column="9"/>
    </issue>

    <issue
        id="Assert"
        severity="Warning"
        message="Assertions are unreliable. Use `BuildConfig.DEBUG` conditional checks instead."
        category="Correctness"
        priority="6"
        summary="Assertions"
        explanation="Assertions are not checked at runtime. There are ways to request that they be used by Dalvik (`adb shell setprop debug.assert 1`), but the property is ignored in many places and can not be relied upon. Instead, perform conditional checking inside `if (BuildConfig.DEBUG) { }` blocks. That constant is a static final boolean which is true in debug builds and false in release builds, and the Java compiler completely removes all code inside the if-body from the app.

For example, you can replace `assert speed > 0` with `if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) { throw new AssertionError() }`.

(Note: This lint check does not flag assertions purely asserting nullness or non-nullness; these are typically more intended for tools usage than runtime checks.)"
        url="https://code.google.com/p/android/issues/detail?id=65183"
        urls="https://code.google.com/p/android/issues/detail?id=65183"
        errorLine1="        assert encoder.op == output_len;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\Base64.java"
            line="516"
            column="9"/>
    </issue>

    <issue
        id="Assert"
        severity="Warning"
        message="Assertions are unreliable. Use `BuildConfig.DEBUG` conditional checks instead."
        category="Correctness"
        priority="6"
        summary="Assertions"
        explanation="Assertions are not checked at runtime. There are ways to request that they be used by Dalvik (`adb shell setprop debug.assert 1`), but the property is ignored in many places and can not be relied upon. Instead, perform conditional checking inside `if (BuildConfig.DEBUG) { }` blocks. That constant is a static final boolean which is true in debug builds and false in release builds, and the Java compiler completely removes all code inside the if-body from the app.

For example, you can replace `assert speed > 0` with `if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) { throw new AssertionError() }`.

(Note: This lint check does not flag assertions purely asserting nullness or non-nullness; these are typically more intended for tools usage than runtime checks.)"
        url="https://code.google.com/p/android/issues/detail?id=65183"
        urls="https://code.google.com/p/android/issues/detail?id=65183"
        errorLine1="                assert tailLen == 0;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\Base64.java"
            line="698"
            column="17"/>
    </issue>

    <issue
        id="Assert"
        severity="Warning"
        message="Assertions are unreliable. Use `BuildConfig.DEBUG` conditional checks instead."
        category="Correctness"
        priority="6"
        summary="Assertions"
        explanation="Assertions are not checked at runtime. There are ways to request that they be used by Dalvik (`adb shell setprop debug.assert 1`), but the property is ignored in many places and can not be relied upon. Instead, perform conditional checking inside `if (BuildConfig.DEBUG) { }` blocks. That constant is a static final boolean which is true in debug builds and false in release builds, and the Java compiler completely removes all code inside the if-body from the app.

For example, you can replace `assert speed > 0` with `if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) { throw new AssertionError() }`.

(Note: This lint check does not flag assertions purely asserting nullness or non-nullness; these are typically more intended for tools usage than runtime checks.)"
        url="https://code.google.com/p/android/issues/detail?id=65183"
        urls="https://code.google.com/p/android/issues/detail?id=65183"
        errorLine1="                assert p == len;"
        errorLine2="                ~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\Base64.java"
            line="699"
            column="17"/>
    </issue>

    <issue
        id="Assert"
        severity="Warning"
        message="Assertions are unreliable. Use `BuildConfig.DEBUG` conditional checks instead."
        category="Correctness"
        priority="6"
        summary="Assertions"
        explanation="Assertions are not checked at runtime. There are ways to request that they be used by Dalvik (`adb shell setprop debug.assert 1`), but the property is ignored in many places and can not be relied upon. Instead, perform conditional checking inside `if (BuildConfig.DEBUG) { }` blocks. That constant is a static final boolean which is true in debug builds and false in release builds, and the Java compiler completely removes all code inside the if-body from the app.

For example, you can replace `assert speed > 0` with `if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) { throw new AssertionError() }`.

(Note: This lint check does not flag assertions purely asserting nullness or non-nullness; these are typically more intended for tools usage than runtime checks.)"
        url="https://code.google.com/p/android/issues/detail?id=65183"
        urls="https://code.google.com/p/android/issues/detail?id=65183"
        errorLine1="  assert(mResources.size()==0);"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\video\ResourceManager.java"
            line="140"
            column="3"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toUpperCase(Locale)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="     b.appendQueryParameter(&quot;i&quot;, MD5Util.GetMD5Code(MacAddress.toUpperCase()));"
        errorLine2="                                                               ~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\AdRequest.java"
            line="307"
            column="64"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toUpperCase(Locale)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="     AdkeyData.setmMac(MD5Util.GetMD5Code(MacAddress.toUpperCase()));"
        errorLine2="                                                     ~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\AdRequest.java"
            line="308"
            column="54"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toUpperCase(Locale)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="    b.appendQueryParameter(&quot;i&quot;, MD5Util.GetMD5Code(info.GetMAC().toUpperCase()));"
        errorLine2="                                                                 ~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\AdRequest.java"
            line="311"
            column="66"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toUpperCase(Locale)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="    AdkeyData.setmMac(MD5Util.GetMD5Code(info.GetMAC().toUpperCase()));"
        errorLine2="                                                       ~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\AdRequest.java"
            line="312"
            column="56"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toUpperCase(Locale)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="    b.appendQueryParameter(&quot;i&quot;, MD5Util.GetMD5Code(MacAddress.toUpperCase()));"
        errorLine2="                                                              ~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\AdRequest.java"
            line="318"
            column="63"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toUpperCase(Locale)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="      b.appendQueryParameter(&quot;i&quot;, MD5Util.GetMD5Code(info.GetMAC().toUpperCase()));"
        errorLine2="                                                                   ~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\mon\AppMonitorServer.java"
            line="211"
            column="68"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toUpperCase(Locale)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="      bc.appendQueryParameter(&quot;i&quot;, MD5Util.GetMD5Code(info.GetMAC().toUpperCase()));"
        errorLine2="                                                                    ~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\mon\AppMonitorServer.java"
            line="298"
            column="69"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toUpperCase(Locale)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="          url.URL=url.URL.replaceAll(REPLACE_MAC, MD5Util.GetMD5Code(mac.toUpperCase()));"
        errorLine2="                                                                         ~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\Monitorer\Monitor.java"
            line="135"
            column="74"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toUpperCase(Locale)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        url.URL=url.URL.replaceAll(REPLACE_MAC, MD5Util.GetMD5Code(MAC.toUpperCase()));"
        errorLine2="                                                                       ~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\Monitorer\Monitor.java"
            line="143"
            column="72"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        return &quot;placementType: &apos;&quot; + mPlacementType.toString().toLowerCase() + &quot;&apos;&quot;;"
        errorLine2="                                                              ~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\mraid\MraidProperty.java"
            line="33"
            column="63"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        return &quot;state: &apos;&quot; + mViewState.toString().toLowerCase() + &quot;&apos;&quot;;"
        errorLine2="                                                  ~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\mraid\MraidProperty.java"
            line="69"
            column="51"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toUpperCase(Locale)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    String joyplus = impretion.replace(&quot;i=&quot;, &quot;i=&quot; + MD5Util.GetMD5Code(Util.GetMacAddress(mContext).toUpperCase()));//将Mac添加到"
        errorLine2="                                                                                                                    ~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\request\Report.java"
            line="223"
            column="117"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="   locale = language.toLowerCase();"
        errorLine2="                     ~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\Util.java"
            line="294"
            column="22"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="    locale += &quot;-&quot; + country.toLowerCase();"
        errorLine2="                            ~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\Util.java"
            line="297"
            column="29"/>
    </issue>

    <issue
        id="OldTargetApi"
        severity="Warning"
        message="Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the `android.os.Build.VERSION_CODES` javadoc for details."
        category="Correctness"
        priority="6"
        summary="Target SDK attribute is not targeting latest version"
        explanation="When your application runs on a version of Android that is more recent than your `targetSdkVersion` specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the `targetSdkVersion` is less than 14, your app may get an option button in the UI.

To fix this issue, set the `targetSdkVersion` to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        url="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        urls="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        errorLine1="        android:targetSdkVersion=&quot;17&quot; />"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\AndroidManifest.xml"
            line="9"
            column="9"/>
    </issue>

    <issue
        id="OldTargetApi"
        severity="Warning"
        message="Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details."
        category="Correctness"
        priority="6"
        summary="Target SDK attribute is not targeting latest version"
        explanation="When your application runs on a version of Android that is more recent than your `targetSdkVersion` specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the `targetSdkVersion` is less than 14, your app may get an option button in the UI.

To fix this issue, set the `targetSdkVersion` to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        url="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        urls="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        errorLine1="        targetSdkVersion 17"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\build.gradle"
            line="9"
            column="9"/>
    </issue>

    <issue
        id="Registered"
        severity="Warning"
        message="The `&lt;activity> com.joyplus.adkey.banner.InAppWebView` is not registered in the manifest"
        category="Correctness"
        priority="6"
        summary="Class is not registered in the manifest"
        explanation="Activities, services and content providers should be registered in the `AndroidManifest.xml` file using `&lt;activity>`, `&lt;service>` and `&lt;provider>` tags.

If your activity is simply a parent class intended to be subclassed by other &quot;real&quot; activities, make it an abstract class."
        url="http://developer.android.com/guide/topics/manifest/manifest-intro.html"
        urls="http://developer.android.com/guide/topics/manifest/manifest-intro.html"
        errorLine1="public class InAppWebView extends Activity {"
        errorLine2="             ~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\banner\InAppWebView.java"
            line="17"
            column="14"/>
    </issue>

    <issue
        id="Registered"
        severity="Warning"
        message="The `&lt;activity> com.joyplus.adkey.mraid.MraidActivity` is not registered in the manifest"
        category="Correctness"
        priority="6"
        summary="Class is not registered in the manifest"
        explanation="Activities, services and content providers should be registered in the `AndroidManifest.xml` file using `&lt;activity>`, `&lt;service>` and `&lt;provider>` tags.

If your activity is simply a parent class intended to be subclassed by other &quot;real&quot; activities, make it an abstract class."
        url="http://developer.android.com/guide/topics/manifest/manifest-intro.html"
        urls="http://developer.android.com/guide/topics/manifest/manifest-intro.html"
        errorLine1="public class MraidActivity extends BaseActivity {    "
        errorLine2="             ~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\mraid\MraidActivity.java"
            line="8"
            column="14"/>
    </issue>

    <issue
        id="Registered"
        severity="Warning"
        message="The `&lt;activity> com.joyplus.adkey.video.RichMediaActivity` is not registered in the manifest"
        category="Correctness"
        priority="6"
        summary="Class is not registered in the manifest"
        explanation="Activities, services and content providers should be registered in the `AndroidManifest.xml` file using `&lt;activity>`, `&lt;service>` and `&lt;provider>` tags.

If your activity is simply a parent class intended to be subclassed by other &quot;real&quot; activities, make it an abstract class."
        url="http://developer.android.com/guide/topics/manifest/manifest-intro.html"
        urls="http://developer.android.com/guide/topics/manifest/manifest-intro.html"
        errorLine1="public class RichMediaActivity extends Activity"
        errorLine2="             ~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\video\RichMediaActivity.java"
            line="60"
            column="14"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).

Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="        SimpleDateFormat format = new SimpleDateFormat(&quot;Z&quot;);"
        errorLine2="                                  ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\mraid\AdView.java"
            line="360"
            column="35"/>
    </issue>

    <issue
        id="WrongCall"
        severity="Fatal"
        message="Suspicious method call; should probably call &quot;`measure`&quot; rather than &quot;`onMeasure`&quot;"
        category="Correctness"
        priority="6"
        summary="Using wrong draw/layout method"
        explanation="Custom views typically need to call `measure()` on their children, not `onMeasure`. Ditto for onDraw, onLayout, etc."
        errorLine1="   super.onMeasure(widthMeasureSpec, heightMeasureSpec);"
        errorLine2="         ~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\video\AspectRatioImageView.java"
            line="66"
            column="10"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.android.support:support-v4 than 18.0.0 is available: 23.1.1"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    compile &apos;com.android.support:support-v4:18.0.0&apos;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\build.gradle"
            line="25"
            column="5"/>
    </issue>

    <issue
        id="GradleOverrides"
        severity="Warning"
        message="This `minSdkVersion` value (`8`) is not used; it is always overridden by the value specified in the Gradle build script (`8`)"
        category="Correctness"
        priority="4"
        summary="Value overridden by Gradle build script"
        explanation="The value of (for example) `minSdkVersion` is only used if it is not specified in the `build.gradle` build scripts. When specified in the Gradle build scripts, the manifest value is ignored and can be misleading, so should be removed to avoid ambiguity."
        errorLine1="        android:minSdkVersion=&quot;8&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\AndroidManifest.xml"
            line="8"
            column="9"/>
    </issue>

    <issue
        id="GradleOverrides"
        severity="Warning"
        message="This `targetSdkVersion` value (`17`) is not used; it is always overridden by the value specified in the Gradle build script (`17`)"
        category="Correctness"
        priority="4"
        summary="Value overridden by Gradle build script"
        explanation="The value of (for example) `minSdkVersion` is only used if it is not specified in the `build.gradle` build scripts. When specified in the Gradle build scripts, the manifest value is ignored and can be misleading, so should be removed to avoid ambiguity."
        errorLine1="        android:targetSdkVersion=&quot;17&quot; />"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\AndroidManifest.xml"
            line="9"
            column="9"/>
    </issue>

    <issue
        id="AddJavascriptInterface"
        severity="Warning"
        message="`WebView.addJavascriptInterface` should not be called with minSdkVersion &lt; 17 for security reasons: JavaScript can use reflection to manipulate application"
        category="Security"
        priority="9"
        summary="addJavascriptInterface Called"
        explanation="For applications built for API levels below 17, `WebView#addJavascriptInterface` presents a security hazard as JavaScript on the target web page has the ability to use reflection to access the injected object&apos;s public fields and thus manipulate the host application in unintended ways."
        url="https://labs.mwrinfosecurity.com/blog/2013/09/24/webview-addjavascriptinterface-remote-code-execution/"
        urls="https://labs.mwrinfosecurity.com/blog/2013/09/24/webview-addjavascriptinterface-remote-code-execution/"
        errorLine1="        addJavascriptInterface(new MoPubUriJavascriptInterface(), &quot;mopubUriInterface&quot;);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\mraid\AdView.java"
            line="167"
            column="9"/>
    </issue>

    <issue
        id="JavascriptInterface"
        severity="Error"
        message="None of the methods in the added interface (MoPubUriJavascriptInterface) have been annotated with `@android.webkit.JavascriptInterface`; they will not be visible in API 17"
        category="Security"
        priority="8"
        summary="Missing @JavascriptInterface on methods"
        explanation="As of API 17, you must annotate methods in objects registered with the `addJavascriptInterface` method with a `@JavascriptInterface` annotation."
        url="http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object, java.lang.String)"
        urls="http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object, java.lang.String)"
        errorLine1="        addJavascriptInterface(new MoPubUriJavascriptInterface(), &quot;mopubUriInterface&quot;);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\mraid\AdView.java"
            line="167"
            column="9"/>
    </issue>

    <issue
        id="SetJavaScriptEnabled"
        severity="Warning"
        message="Using `setJavaScriptEnabled` can introduce XSS vulnerabilities into you application, review carefully."
        category="Security"
        priority="6"
        summary="Using `setJavaScriptEnabled`"
        explanation="Your code should not invoke `setJavaScriptEnabled` if you are not sure that your app really requires JavaScript support."
        url="http://developer.android.com/guide/practices/security.html"
        urls="http://developer.android.com/guide/practices/security.html"
        errorLine1="  mInterstitialImageView.getSettings().setJavaScriptEnabled(true);"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\mini\AdMiniView.java"
            line="373"
            column="3"/>
    </issue>

    <issue
        id="SetJavaScriptEnabled"
        severity="Warning"
        message="Using `setJavaScriptEnabled` can introduce XSS vulnerabilities into you application, review carefully."
        category="Security"
        priority="6"
        summary="Using `setJavaScriptEnabled`"
        explanation="Your code should not invoke `setJavaScriptEnabled` if you are not sure that your app really requires JavaScript support."
        url="http://developer.android.com/guide/practices/security.html"
        urls="http://developer.android.com/guide/practices/security.html"
        errorLine1="        getSettings().setJavaScriptEnabled(true);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\mraid\AdView.java"
            line="126"
            column="9"/>
    </issue>

    <issue
        id="SetJavaScriptEnabled"
        severity="Warning"
        message="Using `setJavaScriptEnabled` can introduce XSS vulnerabilities into you application, review carefully."
        category="Security"
        priority="6"
        summary="Using `setJavaScriptEnabled`"
        explanation="Your code should not invoke `setJavaScriptEnabled` if you are not sure that your app really requires JavaScript support."
        url="http://developer.android.com/guide/practices/security.html"
        urls="http://developer.android.com/guide/practices/security.html"
        errorLine1="  this.webSettings.setJavaScriptEnabled(true);"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\banner\BannerAdView.java"
            line="99"
            column="3"/>
    </issue>

    <issue
        id="SetJavaScriptEnabled"
        severity="Warning"
        message="Using `setJavaScriptEnabled` can introduce XSS vulnerabilities into you application, review carefully."
        category="Security"
        priority="6"
        summary="Using `setJavaScriptEnabled`"
        explanation="Your code should not invoke `setJavaScriptEnabled` if you are not sure that your app really requires JavaScript support."
        url="http://developer.android.com/guide/practices/security.html"
        urls="http://developer.android.com/guide/practices/security.html"
        errorLine1="  this.webSettings.setJavaScriptEnabled(true);"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\banner\BannerAdViewScreenSaver.java"
            line="100"
            column="3"/>
    </issue>

    <issue
        id="SetJavaScriptEnabled"
        severity="Warning"
        message="Using `setJavaScriptEnabled` can introduce XSS vulnerabilities into you application, review carefully."
        category="Security"
        priority="6"
        summary="Using `setJavaScriptEnabled`"
        explanation="Your code should not invoke `setJavaScriptEnabled` if you are not sure that your app really requires JavaScript support."
        url="http://developer.android.com/guide/practices/security.html"
        urls="http://developer.android.com/guide/practices/security.html"
        errorLine1="  mInterstitialImageView.getSettings().setJavaScriptEnabled(true);"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\floatlayout\FloatLayoutView.java"
            line="356"
            column="3"/>
    </issue>

    <issue
        id="SetJavaScriptEnabled"
        severity="Warning"
        message="Using `setJavaScriptEnabled` can introduce XSS vulnerabilities into you application, review carefully."
        category="Security"
        priority="6"
        summary="Using `setJavaScriptEnabled`"
        explanation="Your code should not invoke `setJavaScriptEnabled` if you are not sure that your app really requires JavaScript support."
        url="http://developer.android.com/guide/practices/security.html"
        urls="http://developer.android.com/guide/practices/security.html"
        errorLine1="  mInterstitialImageView.getSettings().setJavaScriptEnabled(true);"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\floatlayout\FloatLayoutView2.java"
            line="118"
            column="3"/>
    </issue>

    <issue
        id="SetJavaScriptEnabled"
        severity="Warning"
        message="Using `setJavaScriptEnabled` can introduce XSS vulnerabilities into you application, review carefully."
        category="Security"
        priority="6"
        summary="Using `setJavaScriptEnabled`"
        explanation="Your code should not invoke `setJavaScriptEnabled` if you are not sure that your app really requires JavaScript support."
        url="http://developer.android.com/guide/practices/security.html"
        urls="http://developer.android.com/guide/practices/security.html"
        errorLine1="  mWebSettings.setJavaScriptEnabled(true);"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\floatlayout\FloatView.java"
            line="67"
            column="3"/>
    </issue>

    <issue
        id="SetJavaScriptEnabled"
        severity="Warning"
        message="Using `setJavaScriptEnabled` can introduce XSS vulnerabilities into you application, review carefully."
        category="Security"
        priority="6"
        summary="Using `setJavaScriptEnabled`"
        explanation="Your code should not invoke `setJavaScriptEnabled` if you are not sure that your app really requires JavaScript support."
        url="http://developer.android.com/guide/practices/security.html"
        urls="http://developer.android.com/guide/practices/security.html"
        errorLine1="  webSettings.setJavaScriptEnabled(true);"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\banner\InAppWebView.java"
            line="39"
            column="3"/>
    </issue>

    <issue
        id="SetJavaScriptEnabled"
        severity="Warning"
        message="Using `setJavaScriptEnabled` can introduce XSS vulnerabilities into you application, review carefully."
        category="Security"
        priority="6"
        summary="Using `setJavaScriptEnabled`"
        explanation="Your code should not invoke `setJavaScriptEnabled` if you are not sure that your app really requires JavaScript support."
        url="http://developer.android.com/guide/practices/security.html"
        urls="http://developer.android.com/guide/practices/security.html"
        errorLine1="        getSettings().setJavaScriptEnabled(true);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\mraid\MraidView.java"
            line="117"
            column="9"/>
    </issue>

    <issue
        id="SetJavaScriptEnabled"
        severity="Warning"
        message="Using `setJavaScriptEnabled` can introduce XSS vulnerabilities into you application, review carefully."
        category="Security"
        priority="6"
        summary="Using `setJavaScriptEnabled`"
        explanation="Your code should not invoke `setJavaScriptEnabled` if you are not sure that your app really requires JavaScript support."
        url="http://developer.android.com/guide/practices/security.html"
        urls="http://developer.android.com/guide/practices/security.html"
        errorLine1="  webSettings.setJavaScriptEnabled(true);"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\video\WebFrame.java"
            line="89"
            column="3"/>
    </issue>

    <issue
        id="SetJavaScriptEnabled"
        severity="Warning"
        message="Using `setJavaScriptEnabled` can introduce XSS vulnerabilities into you application, review carefully."
        category="Security"
        priority="6"
        summary="Using `setJavaScriptEnabled`"
        explanation="Your code should not invoke `setJavaScriptEnabled` if you are not sure that your app really requires JavaScript support."
        url="http://developer.android.com/guide/practices/security.html"
        urls="http://developer.android.com/guide/practices/security.html"
        errorLine1="  webSettings.setJavaScriptEnabled(true);"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\video\WebFrameService.java"
            line="91"
            column="3"/>
    </issue>

    <issue
        id="TrustAllX509TrustManager"
        severity="Warning"
        message="`checkClientTrusted` is empty, which could cause insecure network traffic due to trusting arbitrary TLS/SSL certificates presented by peers"
        category="Security"
        priority="6"
        summary="Insecure TLS/SSL trust manager"
        explanation="This check looks for X509TrustManager implementations whose `checkServerTrusted` or `checkClientTrusted` methods do nothing (thus trusting any certificate chain) which could result in insecure network traffic caused by trusting arbitrary TLS/SSL certificates presented by peers.">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\com\common\internet\SSLSocketFactoryEx$1.class"/>
    </issue>

    <issue
        id="TrustAllX509TrustManager"
        severity="Warning"
        message="`checkServerTrusted` is empty, which could cause insecure network traffic due to trusting arbitrary TLS/SSL certificates presented by peers"
        category="Security"
        priority="6"
        summary="Insecure TLS/SSL trust manager"
        explanation="This check looks for X509TrustManager implementations whose `checkServerTrusted` or `checkClientTrusted` methods do nothing (thus trusting any certificate chain) which could result in insecure network traffic caused by trusting arbitrary TLS/SSL certificates presented by peers.">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\com\common\internet\SSLSocketFactoryEx$1.class"/>
    </issue>

    <issue
        id="HardcodedDebugMode"
        severity="Fatal"
        message="Avoid hardcoding the debug mode; leaving it out allows debug and release builds to automatically assign one"
        category="Security"
        priority="5"
        summary="Hardcoded value of `android:debuggable` in the manifest"
        explanation="It&apos;s best to leave out the `android:debuggable` attribute from the manifest. If you do, then the tools will automatically insert `android:debuggable=true` when building an APK to debug on an emulator or device. And when you perform a release build, such as Exporting APK, it will automatically set it to `false`.

If on the other hand you specify a specific value in the manifest file, then the tools will always use it. This can lead to accidentally publishing your app with debug information."
        errorLine1="    &lt;application android:debuggable=&quot;true&quot;>"
        errorLine2="                 ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\AndroidManifest.xml"
            line="23"
            column="18"/>
    </issue>

    <issue
        id="HandlerLeak"
        severity="Warning"
        message="This Handler class should be static or leaks might occur (anonymous android.os.Handler)"
        category="Performance"
        priority="4"
        summary="Handler reference leaks"
        explanation="Since this Handler is declared as an inner class, it may prevent the outer class from being garbage collected. If the Handler is using a Looper or MessageQueue for a thread other than the main thread, then there is no issue. If the Handler is using the Looper or MessageQueue of the main thread, you need to fix your Handler declaration, as follows: Declare the Handler as a static class; In the outer class, instantiate a WeakReference to the outer class and pass this object to your Handler when you instantiate the Handler; Make all references to members of the outer class using the WeakReference object."
        errorLine1="  private Handler mHandler = new Handler(){"
        errorLine2="                             ~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\Monitorer\AdMonitorServer.java"
            line="49"
            column="30"/>
    </issue>

    <issue
        id="HandlerLeak"
        severity="Warning"
        message="This Handler class should be static or leaks might occur (anonymous android.os.Handler)"
        category="Performance"
        priority="4"
        summary="Handler reference leaks"
        explanation="Since this Handler is declared as an inner class, it may prevent the outer class from being garbage collected. If the Handler is using a Looper or MessageQueue for a thread other than the main thread, then there is no issue. If the Handler is using the Looper or MessageQueue of the main thread, you need to fix your Handler declaration, as follows: Declare the Handler as a static class; In the outer class, instantiate a WeakReference to the outer class and pass this object to your Handler when you instantiate the Handler; Make all references to members of the outer class using the WeakReference object.">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\banner\AdViewScreenSaver.java"
            line="81"
            column="29"/>
    </issue>

    <issue
        id="HandlerLeak"
        severity="Warning"
        message="This Handler class should be static or leaks might occur (anonymous android.os.Handler)"
        category="Performance"
        priority="4"
        summary="Handler reference leaks"
        explanation="Since this Handler is declared as an inner class, it may prevent the outer class from being garbage collected. If the Handler is using a Looper or MessageQueue for a thread other than the main thread, then there is no issue. If the Handler is using the Looper or MessageQueue of the main thread, you need to fix your Handler declaration, as follows: Declare the Handler as a static class; In the outer class, instantiate a WeakReference to the outer class and pass this object to your Handler when you instantiate the Handler; Make all references to members of the outer class using the WeakReference object."
        errorLine1="  private Handler mHandler = new Handler(){"
        errorLine2="                             ~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\mon\AppMonitorServer.java"
            line="49"
            column="30"/>
    </issue>

    <issue
        id="HandlerLeak"
        severity="Warning"
        message="This Handler class should be static or leaks might occur (anonymous android.os.Handler)"
        category="Performance"
        priority="4"
        summary="Handler reference leaks"
        explanation="Since this Handler is declared as an inner class, it may prevent the outer class from being garbage collected. If the Handler is using a Looper or MessageQueue for a thread other than the main thread, then there is no issue. If the Handler is using the Looper or MessageQueue of the main thread, you need to fix your Handler declaration, as follows: Declare the Handler as a static class; In the outer class, instantiate a WeakReference to the outer class and pass this object to your Handler when you instantiate the Handler; Make all references to members of the outer class using the WeakReference object."
        errorLine1="    private  Handler mHandler = new Handler(){"
        errorLine2="                                ~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\downloads\DownLoadManager.java"
            line="56"
            column="33"/>
    </issue>

    <issue
        id="HandlerLeak"
        severity="Warning"
        message="This Handler class should be static or leaks might occur (anonymous android.os.Handler)"
        category="Performance"
        priority="4"
        summary="Handler reference leaks"
        explanation="Since this Handler is declared as an inner class, it may prevent the outer class from being garbage collected. If the Handler is using a Looper or MessageQueue for a thread other than the main thread, then there is no issue. If the Handler is using the Looper or MessageQueue of the main thread, you need to fix your Handler declaration, as follows: Declare the Handler as a static class; In the outer class, instantiate a WeakReference to the outer class and pass this object to your Handler when you instantiate the Handler; Make all references to members of the outer class using the WeakReference object."
        errorLine1="   private Handler mHandler = new Handler(){"
        errorLine2="                              ~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\Monitorer\Monitorer.java"
            line="78"
            column="31"/>
    </issue>

    <issue
        id="UseSparseArrays"
        severity="Warning"
        message="Use `new SparseArray&lt;Drawable>(...)` instead for better performance"
        category="Performance"
        priority="4"
        summary="HashMap can be replaced with SparseArray"
        explanation="For maps where the keys are of type integer, it&apos;s typically more efficient to use the Android `SparseArray` API. This check identifies scenarios where you might want to consider using `SparseArray` instead of `HashMap` for better performance.

This is *particularly* useful when the value types are primitives like ints, where you can use `SparseIntArray` and avoid auto-boxing the values from `int` to `Integer`.

If you need to construct a `HashMap` because you need to call an API outside of your control which requires a `Map`, you can suppress this warning using for example the `@SuppressLint` annotation."
        errorLine1=" private static HashMap&lt;Integer, Drawable> sResources = new HashMap&lt;Integer,Drawable>();"
        errorLine2="                                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\video\ResourceManager.java"
            line="65"
            column="57"/>
    </issue>

    <issue
        id="UseSparseArrays"
        severity="Warning"
        message="Use `new SparseArray&lt;Drawable>(...)` instead for better performance"
        category="Performance"
        priority="4"
        summary="HashMap can be replaced with SparseArray"
        explanation="For maps where the keys are of type integer, it&apos;s typically more efficient to use the Android `SparseArray` API. This check identifies scenarios where you might want to consider using `SparseArray` instead of `HashMap` for better performance.

This is *particularly* useful when the value types are primitives like ints, where you can use `SparseIntArray` and avoid auto-boxing the values from `int` to `Integer`.

If you need to construct a `HashMap` because you need to call an API outside of your control which requires a `Map`, you can suppress this warning using for example the `@SuppressLint` annotation."
        errorLine1=" private HashMap&lt;Integer, Drawable> mResources = new HashMap&lt;Integer,Drawable>();"
        errorLine2="                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\video\ResourceManager.java"
            line="68"
            column="50"/>
    </issue>

    <issue
        id="UseSparseArrays"
        severity="Warning"
        message="Use `new SparseArray&lt;Vector&lt;OnTimeEventListener>>(...)` instead for better performance"
        category="Performance"
        priority="4"
        summary="HashMap can be replaced with SparseArray"
        explanation="For maps where the keys are of type integer, it&apos;s typically more efficient to use the Android `SparseArray` API. This check identifies scenarios where you might want to consider using `SparseArray` instead of `HashMap` for better performance.

This is *particularly* useful when the value types are primitives like ints, where you can use `SparseIntArray` and avoid auto-boxing the values from `int` to `Integer`.

If you need to construct a `HashMap` because you need to call an API outside of your control which requires a `Map`, you can suppress this warning using for example the `@SuppressLint` annotation."
        errorLine1=" private HashMap&lt;Integer, Vector&lt;OnTimeEventListener>> mTimeEventListeners = new HashMap&lt;Integer, Vector&lt;OnTimeEventListener>>();"
        errorLine2="                                                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\video\SDKVideoView.java"
            line="64"
            column="78"/>
    </issue>

    <issue
        id="UseSparseArrays"
        severity="Warning"
        message="Use `new SparseArray&lt;String>(...)` instead for better performance"
        category="Performance"
        priority="4"
        summary="HashMap can be replaced with SparseArray"
        explanation="For maps where the keys are of type integer, it&apos;s typically more efficient to use the Android `SparseArray` API. This check identifies scenarios where you might want to consider using `SparseArray` instead of `HashMap` for better performance.

This is *particularly* useful when the value types are primitives like ints, where you can use `SparseIntArray` and avoid auto-boxing the values from `int` to `Integer`.

If you need to construct a `HashMap` because you need to call an API outside of your control which requires a `Map`, you can suppress this warning using for example the `@SuppressLint` annotation."
        errorLine1=" public static Map&lt;Integer, String> pic_downloaders = new HashMap&lt;Integer, String>();"
        errorLine2="                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\Util.java"
            line="76"
            column="55"/>
    </issue>

    <issue
        id="UseSparseArrays"
        severity="Warning"
        message="Use `new SparseArray&lt;Vector&lt;String>>(...)` instead for better performance"
        category="Performance"
        priority="4"
        summary="HashMap can be replaced with SparseArray"
        explanation="For maps where the keys are of type integer, it&apos;s typically more efficient to use the Android `SparseArray` API. This check identifies scenarios where you might want to consider using `SparseArray` instead of `HashMap` for better performance.

This is *particularly* useful when the value types are primitives like ints, where you can use `SparseIntArray` and avoid auto-boxing the values from `int` to `Integer`.

If you need to construct a `HashMap` because you need to call an API outside of your control which requires a `Map`, you can suppress this warning using for example the `@SuppressLint` annotation."
        errorLine1=" public HashMap&lt;Integer, Vector&lt;String>> timeTrackingEvents = new HashMap&lt;Integer, Vector&lt;String>>();"
        errorLine2="                                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\video\VideoData.java"
            line="53"
            column="63"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.app_name` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;app_name&quot;>adkey&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\res\values\strings.xml"
            line="4"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.menu_settings` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;menu_settings&quot;>Settings&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\res\values\strings.xml"
            line="5"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.hello_world` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;hello_world&quot;>Hello world!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\res\values\strings.xml"
            line="6"
            column="13"/>
    </issue>

    <issue
        id="ViewConstructor"
        severity="Warning"
        message="Custom view `AdMiniView` is missing constructor used by tools: `(Context)` or `(Context,AttributeSet)` or `(Context,AttributeSet,int)`"
        category="Usability"
        priority="3"
        summary="Missing View constructors for XML inflation"
        explanation="Some layout tools (such as the Android layout editor for Studio &amp; Eclipse) needs to find a constructor with one of the following signatures:
* `View(Context context)`
* `View(Context context, AttributeSet attrs)`
* `View(Context context, AttributeSet attrs, int defStyle)`

If your custom view needs to perform initialization which does not apply when used in a layout editor, you can surround the given code with a check to see if `View#isInEditMode()` is false, since that method will return `false` at runtime but true within a user interface editor."
        errorLine1="public class AdMiniView extends RelativeLayout{"
        errorLine2="             ~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\mini\AdMiniView.java"
            line="47"
            column="14"/>
    </issue>

    <issue
        id="ViewConstructor"
        severity="Warning"
        message="Custom view `AdView` is missing constructor used by tools: `(Context)` or `(Context,AttributeSet)` or `(Context,AttributeSet,int)`"
        category="Usability"
        priority="3"
        summary="Missing View constructors for XML inflation"
        explanation="Some layout tools (such as the Android layout editor for Studio &amp; Eclipse) needs to find a constructor with one of the following signatures:
* `View(Context context)`
* `View(Context context, AttributeSet attrs)`
* `View(Context context, AttributeSet attrs, int defStyle)`

If your custom view needs to perform initialization which does not apply when used in a layout editor, you can surround the given code with a check to see if `View#isInEditMode()` is false, since that method will return `false` at runtime but true within a user interface editor."
        errorLine1="public class AdView extends WebView {"
        errorLine2="             ~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\mraid\AdView.java"
            line="71"
            column="14"/>
    </issue>

    <issue
        id="ViewConstructor"
        severity="Warning"
        message="Custom view `BannerAdView` is missing constructor used by tools: `(Context)` or `(Context,AttributeSet)` or `(Context,AttributeSet,int)`"
        category="Usability"
        priority="3"
        summary="Missing View constructors for XML inflation"
        explanation="Some layout tools (such as the Android layout editor for Studio &amp; Eclipse) needs to find a constructor with one of the following signatures:
* `View(Context context)`
* `View(Context context, AttributeSet attrs)`
* `View(Context context, AttributeSet attrs, int defStyle)`

If your custom view needs to perform initialization which does not apply when used in a layout editor, you can surround the given code with a check to see if `View#isInEditMode()` is false, since that method will return `false` at runtime but true within a user interface editor."
        errorLine1="public class BannerAdView extends RelativeLayout {"
        errorLine2="             ~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\banner\BannerAdView.java"
            line="27"
            column="14"/>
    </issue>

    <issue
        id="ViewConstructor"
        severity="Warning"
        message="Custom view `BannerAdViewScreenSaver` is missing constructor used by tools: `(Context)` or `(Context,AttributeSet)` or `(Context,AttributeSet,int)`"
        category="Usability"
        priority="3"
        summary="Missing View constructors for XML inflation"
        explanation="Some layout tools (such as the Android layout editor for Studio &amp; Eclipse) needs to find a constructor with one of the following signatures:
* `View(Context context)`
* `View(Context context, AttributeSet attrs)`
* `View(Context context, AttributeSet attrs, int defStyle)`

If your custom view needs to perform initialization which does not apply when used in a layout editor, you can surround the given code with a check to see if `View#isInEditMode()` is false, since that method will return `false` at runtime but true within a user interface editor."
        errorLine1="public class BannerAdViewScreenSaver extends RelativeLayout {"
        errorLine2="             ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\banner\BannerAdViewScreenSaver.java"
            line="28"
            column="14"/>
    </issue>

    <issue
        id="ViewConstructor"
        severity="Warning"
        message="Custom view `FloatLayoutView` is missing constructor used by tools: `(Context)` or `(Context,AttributeSet)` or `(Context,AttributeSet,int)`"
        category="Usability"
        priority="3"
        summary="Missing View constructors for XML inflation"
        explanation="Some layout tools (such as the Android layout editor for Studio &amp; Eclipse) needs to find a constructor with one of the following signatures:
* `View(Context context)`
* `View(Context context, AttributeSet attrs)`
* `View(Context context, AttributeSet attrs, int defStyle)`

If your custom view needs to perform initialization which does not apply when used in a layout editor, you can surround the given code with a check to see if `View#isInEditMode()` is false, since that method will return `false` at runtime but true within a user interface editor."
        errorLine1="public class FloatLayoutView extends RelativeLayout{"
        errorLine2="             ~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\floatlayout\FloatLayoutView.java"
            line="44"
            column="14"/>
    </issue>

    <issue
        id="ViewConstructor"
        severity="Warning"
        message="Custom view `FloatLayoutView2` is missing constructor used by tools: `(Context)` or `(Context,AttributeSet)` or `(Context,AttributeSet,int)`"
        category="Usability"
        priority="3"
        summary="Missing View constructors for XML inflation"
        explanation="Some layout tools (such as the Android layout editor for Studio &amp; Eclipse) needs to find a constructor with one of the following signatures:
* `View(Context context)`
* `View(Context context, AttributeSet attrs)`
* `View(Context context, AttributeSet attrs, int defStyle)`

If your custom view needs to perform initialization which does not apply when used in a layout editor, you can surround the given code with a check to see if `View#isInEditMode()` is false, since that method will return `false` at runtime but true within a user interface editor."
        errorLine1="public class FloatLayoutView2 extends RelativeLayout{"
        errorLine2="             ~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\floatlayout\FloatLayoutView2.java"
            line="28"
            column="14"/>
    </issue>

    <issue
        id="ViewConstructor"
        severity="Warning"
        message="Custom view `FloatView` is missing constructor used by tools: `(Context)` or `(Context,AttributeSet)` or `(Context,AttributeSet,int)`"
        category="Usability"
        priority="3"
        summary="Missing View constructors for XML inflation"
        explanation="Some layout tools (such as the Android layout editor for Studio &amp; Eclipse) needs to find a constructor with one of the following signatures:
* `View(Context context)`
* `View(Context context, AttributeSet attrs)`
* `View(Context context, AttributeSet attrs, int defStyle)`

If your custom view needs to perform initialization which does not apply when used in a layout editor, you can surround the given code with a check to see if `View#isInEditMode()` is false, since that method will return `false` at runtime but true within a user interface editor."
        errorLine1="public class FloatView extends RelativeLayout {"
        errorLine2="             ~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\floatlayout\FloatView.java"
            line="29"
            column="14"/>
    </issue>

    <issue
        id="ViewConstructor"
        severity="Warning"
        message="Custom view `InterstitialController` is missing constructor used by tools: `(Context)` or `(Context,AttributeSet)` or `(Context,AttributeSet,int)`"
        category="Usability"
        priority="3"
        summary="Missing View constructors for XML inflation"
        explanation="Some layout tools (such as the Android layout editor for Studio &amp; Eclipse) needs to find a constructor with one of the following signatures:
* `View(Context context)`
* `View(Context context, AttributeSet attrs)`
* `View(Context context, AttributeSet attrs, int defStyle)`

If your custom view needs to perform initialization which does not apply when used in a layout editor, you can surround the given code with a check to see if `View#isInEditMode()` is false, since that method will return `false` at runtime but true within a user interface editor."
        errorLine1="public class InterstitialController extends LinearLayout {"
        errorLine2="             ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\video\InterstitialController.java"
            line="23"
            column="14"/>
    </issue>

    <issue
        id="ViewConstructor"
        severity="Warning"
        message="Custom view `MediaController` is missing constructor used by tools: `(Context)` or `(Context,AttributeSet)` or `(Context,AttributeSet,int)`"
        category="Usability"
        priority="3"
        summary="Missing View constructors for XML inflation"
        explanation="Some layout tools (such as the Android layout editor for Studio &amp; Eclipse) needs to find a constructor with one of the following signatures:
* `View(Context context)`
* `View(Context context, AttributeSet attrs)`
* `View(Context context, AttributeSet attrs, int defStyle)`

If your custom view needs to perform initialization which does not apply when used in a layout editor, you can surround the given code with a check to see if `View#isInEditMode()` is false, since that method will return `false` at runtime but true within a user interface editor."
        errorLine1="public class MediaController extends FrameLayout {"
        errorLine2="             ~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\video\MediaController.java"
            line="24"
            column="14"/>
    </issue>

    <issue
        id="ViewConstructor"
        severity="Warning"
        message="Custom view `NavIcon` is missing constructor used by tools: `(Context)` or `(Context,AttributeSet)` or `(Context,AttributeSet,int)`"
        category="Usability"
        priority="3"
        summary="Missing View constructors for XML inflation"
        explanation="Some layout tools (such as the Android layout editor for Studio &amp; Eclipse) needs to find a constructor with one of the following signatures:
* `View(Context context)`
* `View(Context context, AttributeSet attrs)`
* `View(Context context, AttributeSet attrs, int defStyle)`

If your custom view needs to perform initialization which does not apply when used in a layout editor, you can surround the given code with a check to see if `View#isInEditMode()` is false, since that method will return `false` at runtime but true within a user interface editor."
        errorLine1="public class NavIcon extends AspectRatioImageViewWidth implements OnClickListener {"
        errorLine2="             ~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\video\NavIcon.java"
            line="21"
            column="14"/>
    </issue>

    <issue
        id="ViewConstructor"
        severity="Warning"
        message="Custom view `SDKVideoView` is missing constructor used by tools: `(Context)` or `(Context,AttributeSet)` or `(Context,AttributeSet,int)`"
        category="Usability"
        priority="3"
        summary="Missing View constructors for XML inflation"
        explanation="Some layout tools (such as the Android layout editor for Studio &amp; Eclipse) needs to find a constructor with one of the following signatures:
* `View(Context context)`
* `View(Context context, AttributeSet attrs)`
* `View(Context context, AttributeSet attrs, int defStyle)`

If your custom view needs to perform initialization which does not apply when used in a layout editor, you can surround the given code with a check to see if `View#isInEditMode()` is false, since that method will return `false` at runtime but true within a user interface editor."
        errorLine1="public class SDKVideoView extends SurfaceView implements MediaPlayerControl {"
        errorLine2="             ~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\video\SDKVideoView.java"
            line="26"
            column="14"/>
    </issue>

    <issue
        id="ViewConstructor"
        severity="Warning"
        message="Custom view `WebFrame` is missing constructor used by tools: `(Context)` or `(Context,AttributeSet)` or `(Context,AttributeSet,int)`"
        category="Usability"
        priority="3"
        summary="Missing View constructors for XML inflation"
        explanation="Some layout tools (such as the Android layout editor for Studio &amp; Eclipse) needs to find a constructor with one of the following signatures:
* `View(Context context)`
* `View(Context context, AttributeSet attrs)`
* `View(Context context, AttributeSet attrs, int defStyle)`

If your custom view needs to perform initialization which does not apply when used in a layout editor, you can surround the given code with a check to see if `View#isInEditMode()` is false, since that method will return `false` at runtime but true within a user interface editor."
        errorLine1="public class WebFrame extends FrameLayout implements BrowserControl {"
        errorLine2="             ~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\video\WebFrame.java"
            line="31"
            column="14"/>
    </issue>

    <issue
        id="ViewConstructor"
        severity="Warning"
        message="Custom view `WebFrameService` is missing constructor used by tools: `(Context)` or `(Context,AttributeSet)` or `(Context,AttributeSet,int)`"
        category="Usability"
        priority="3"
        summary="Missing View constructors for XML inflation"
        explanation="Some layout tools (such as the Android layout editor for Studio &amp; Eclipse) needs to find a constructor with one of the following signatures:
* `View(Context context)`
* `View(Context context, AttributeSet attrs)`
* `View(Context context, AttributeSet attrs, int defStyle)`

If your custom view needs to perform initialization which does not apply when used in a layout editor, you can surround the given code with a check to see if `View#isInEditMode()` is false, since that method will return `false` at runtime but true within a user interface editor."
        errorLine1="public class WebFrameService extends FrameLayout implements BrowserControl {"
        errorLine2="             ~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\video\WebFrameService.java"
            line="32"
            column="14"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="`com/joyplus/adkey/mraid/AdView$1#onTouch` should call `View#performClick` when a click is detected"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="                public boolean onTouch(View v, MotionEvent event) {"
        errorLine2="                               ~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\mraid\AdView.java"
            line="454"
            column="32"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="`com/joyplus/adkey/mraid/MraidDisplayController$4#onTouch` should call `View#performClick` when a click is detected"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="            public boolean onTouch(View v, MotionEvent event) {"
        errorLine2="                           ~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\mraid\MraidDisplayController.java"
            line="317"
            column="28"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="`com/joyplus/adkey/mraid/MraidView$1#onTouch` should call `View#performClick` when a click is detected"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="            public boolean onTouch(View v, MotionEvent event) {"
        errorLine2="                           ~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\mraid\MraidView.java"
            line="104"
            column="28"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`
* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.
* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.
* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="http://developer.android.com/guide/topics/resources/localization.html"
        urls="http://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="     setText(text.subSequence(0, end) + mEllipsis);"
        errorLine2="             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\video\AutoResizeTextView.java"
            line="181"
            column="14"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="  params.gravity = Gravity.LEFT | Gravity.CENTER_VERTICAL;"
        errorLine2="                           ~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\video\InterstitialController.java"
            line="168"
            column="28"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="  params.gravity = Gravity.RIGHT | Gravity.CENTER_VERTICAL;"
        errorLine2="                           ~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\video\InterstitialController.java"
            line="213"
            column="28"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="  mNavIconsLayout.setGravity(Gravity.CENTER_VERTICAL | Gravity.RIGHT);"
        errorLine2="                                                               ~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\video\InterstitialController.java"
            line="216"
            column="64"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="  params.gravity = Gravity.LEFT;"
        errorLine2="                           ~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\video\MediaController.java"
            line="112"
            column="28"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                    buttonSize, buttonSize, Gravity.RIGHT);"
        errorLine2="                                                    ~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\mraid\MraidDisplayController.java"
            line="375"
            column="53"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="     Gravity.TOP | Gravity.RIGHT);"
        errorLine2="                           ~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\video\RichMediaActivity.java"
            line="783"
            column="28"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="     Gravity.TOP | Gravity.RIGHT);"
        errorLine2="                           ~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\video\RichMediaActivity.java"
            line="1016"
            column="28"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="     Gravity.TOP | Gravity.RIGHT);"
        errorLine2="                           ~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\video\RichMediaFloat.java"
            line="217"
            column="28"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="     Gravity.TOP | Gravity.RIGHT);"
        errorLine2="                           ~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\video\RichMediaFloat.java"
            line="414"
            column="28"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="     Gravity.TOP | Gravity.RIGHT);"
        errorLine2="                           ~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\video\RichMediaScreenView.java"
            line="217"
            column="28"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="     Gravity.TOP | Gravity.RIGHT);"
        errorLine2="                           ~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\video\RichMediaScreenView.java"
            line="411"
            column="28"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="     Gravity.TOP | Gravity.RIGHT);"
        errorLine2="                           ~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\video\RichMediaView.java"
            line="216"
            column="28"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="     Gravity.TOP | Gravity.RIGHT);"
        errorLine2="                           ~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\video\RichMediaView.java"
            line="408"
            column="28"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="     | Gravity.RIGHT);"
        errorLine2="               ~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\video\WebFrame.java"
            line="133"
            column="16"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="     | Gravity.RIGHT);"
        errorLine2="               ~~~~~">
        <location
            file="C:\Users\UPC\AndroidStudioProjects\ADKEY\adkey3\app\src\main\java\com\joyplus\adkey\video\WebFrameService.java"
            line="136"
            column="16"/>
    </issue>

</issues>
